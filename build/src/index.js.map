{"version":3,"file":"index.js","names":["app","express","dotenv","config","use","json","bodyParser","urlencoded","extended","mongoose","Promise","global","connect","process","env","MONGO_URL","useNewUrlParser","useUnifiedTopology","useCreateIndex","useFindAndModify","then","console","log","catch","err","exit","get","req","res","message","commentRoute","authRoute","userRoute","postRoute","categoryRoute","listen"],"sources":["../../src/index.js"],"sourcesContent":["import express from \"express\";\nconst app = express();\n// import app from express();\nimport dotenv from \"dotenv\";\nimport mongoose from \"mongoose\";\nimport authRoute from \"./routes/auth.js\";\nimport userRoute from \"./routes/users.js\";\nimport postRoute from \"./routes/posts.js\";\nimport categoryRoute from \"./routes/categories.js\";\nimport commentRoute from \"./routes/commentCo.js\";\nimport bodyParser from 'body-parser';\nimport path from \"path\";\nimport authorization from \"./middlewires/middleware.js\";\n// import dbConfig from './config/database.config.js';\ndotenv.config();\napp.use(express.json());\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(bodyParser.json());\n\nmongoose.Promise = global.Promise;\n\nmongoose\n  .connect(process.env.MONGO_URL, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    useCreateIndex: true,\n    useFindAndModify:true\n  })\n  .then(() => {\n    console.log(\"Successfully connected to the database\");    \n}).catch(err => {\n    console.log('something went wrong', err);\n    process.exit();\n});\n// const storage = multer.diskStorage({\n//   destination: (req, file, cb) => {\n//     cb(null, \"images\");\n//   },\n//   filename: (req, file, cb) => {\n//     cb(null, \"eric.jpg\");\n//   },\n// });\n\n// const upload = multer({ storage: storage });\n// app.post(\"/api/upload\", upload.single(\"file\"), (req, res) => {\n//   res.status(200).json(\"File has been uploaded\");\n// });\napp.get('/', (req, res) => {\n   return res.json({message: \"Welcome  I am testing\"});\n});\n// app.use(\"/images\", express.static(path.join(process.cwd(), \"/images\")));\napp.use(\"/api/comment\", commentRoute);\napp.use(\"/api/auth\", authRoute);\napp.use(\"/api/users\", userRoute);\napp.use(\"/api/posts\", postRoute);\napp.use(\"/api/categories\", categoryRoute);\n\napp.listen(\"5000\", () => {\n  console.log(\"Server is listening on port 5000\");\n});\n"],"mappings":";;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAwD;AAXxD,MAAMA,GAAG,GAAG,IAAAC,gBAAO,GAAE;AACrB;;AAWA;AACAC,eAAM,CAACC,MAAM,EAAE;AACfH,GAAG,CAACI,GAAG,CAACH,gBAAO,CAACI,IAAI,EAAE,CAAC;AACvBL,GAAG,CAACI,GAAG,CAACE,mBAAU,CAACC,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAClDR,GAAG,CAACI,GAAG,CAACE,mBAAU,CAACD,IAAI,EAAE,CAAC;AAE1BI,iBAAQ,CAACC,OAAO,GAAGC,MAAM,CAACD,OAAO;AAEjCD,iBAAQ,CACLG,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,SAAS,EAAE;EAC9BC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE,IAAI;EACxBC,cAAc,EAAE,IAAI;EACpBC,gBAAgB,EAAC;AACnB,CAAC,CAAC,CACDC,IAAI,CAAC,MAAM;EACVC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;AACzD,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;EACZH,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEE,GAAG,CAAC;EACxCX,OAAO,CAACY,IAAI,EAAE;AAClB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAzB,GAAG,CAAC0B,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACxB,OAAOA,GAAG,CAACvB,IAAI,CAAC;IAACwB,OAAO,EAAE;EAAuB,CAAC,CAAC;AACtD,CAAC,CAAC;AACF;AACA7B,GAAG,CAACI,GAAG,CAAC,cAAc,EAAE0B,kBAAY,CAAC;AACrC9B,GAAG,CAACI,GAAG,CAAC,WAAW,EAAE2B,aAAS,CAAC;AAC/B/B,GAAG,CAACI,GAAG,CAAC,YAAY,EAAE4B,cAAS,CAAC;AAChChC,GAAG,CAACI,GAAG,CAAC,YAAY,EAAE6B,cAAS,CAAC;AAChCjC,GAAG,CAACI,GAAG,CAAC,iBAAiB,EAAE8B,mBAAa,CAAC;AAEzClC,GAAG,CAACmC,MAAM,CAAC,MAAM,EAAE,MAAM;EACvBd,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;AACjD,CAAC,CAAC"}